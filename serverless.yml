service: chapter-aws-mim

useDotenv: true

provider:
  # Provider info
  name: aws
  region: ${env:REGION}
  profile: ${env:PROFILE}
  tags:
    created-at: 2023-03-05
  environment:
    NEW_SERIES_SNS_ARN: "arn:aws:sns:${env:REGION}:${env:ACCOUNT_NUMBER}:NewSeriesNotification-${env:STAGE}"

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "s3:GetObject"
            - "s3:GetObjectAttributes"
            - "s3:GetObjectAttributes"
            - "s3:DeleteObject"
            - "s3:PutObject"
            - "s3:ListObjectsV2"
            - "s3:ListBuckets"
            - "s3:ListBucket"
          Resource: "*"
        - Effect: Allow
          Action:
            - "sns:Publish"
            - "sns:Subscribe"
            - "sns:Unsubscribe"
          Resource: "*"
        - Effect: Allow
          Action:
            - "lambda:InvokeFunction"
            - "lambda:InvokeAsync"
          Resource: "*"
        - Effect: Allow
          Action:
            - "states:StartExecution"
          Resource: "*"
        - Effect: Allow
          Action:
            - "sqs:*"
          Resource: "*"

  # Optional
  memorySize: 128

  # Deploy config
  deploymentPrefix: chapter-aws-mim-deploy
  deploymentBucket:
    blockPublicAccess: true

package:
  exclude:
    - node_modules/**
    - venv/**

resources:
  Resources:
    chapterInfoBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: chapters-info-${env:STAGE}
    newSeriesNotification:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: NewSeriesNotification-${env:STAGE}
    createSeriesQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: createSeriesQueue-${env:STAGE}

functions:
  postSeries:
    name: postSeries-${env:STAGE}
    handler: functions/chaptersService.addNewSeries
    runtime: nodejs16.x
    timeout: 10
    description: A function that injects the new series into the db-like json
    events:
      - httpApi: "POST /series"
      - s3:
          bucket: chapters-info-${env:STAGE}
          event: s3:ObjectCreated:*
          events: s3:ObjectCreated:*
          rules:
            - prefix: series/
            - suffix: .json
          existing: true
      - sqs:
          arn:
            Fn::GetAtt: [createSeriesQueue, Arn]   
          batchSize: 1
    environment:
      STAGE: ${env:STAGE}

  getSeries:
    name: getSeries-${env:STAGE}
    handler: functions/chaptersService.getChaptersInfo
    runtime: nodejs16.x
    timeout: 10
    description: A function that gets the db-like json
    events:
      - httpApi: "GET /series"
    environment:
      STAGE: ${env:STAGE}

  updateSeries:
    name: updateSeries-${env:STAGE}
    handler: functions/chaptersService.updateChapterInfo
    runtime: nodejs16.x
    timeout: 10
    description: A function that updates the a series in the db-like json
    events:
      - httpApi: "PATCH /series"
    environment:
      STAGE: ${env:STAGE}

  getAllFilesSeriesInfo:
    name: getAllFilesSeriesInfo-${env:STAGE}
    handler: functions/getAllSeriesNames.handler
    runtime: python3.8
    timeout: 10
    environment:
      STAGE: ${env:STAGE}

  getFixedFileContent:
    name: getFixedFileContent-${env:STAGE}
    handler: functions/getFixedFileContent.handler
    runtime: python3.8
    timeout: 10
    environment:
      STAGE: ${env:STAGE}

  getFailedInfoToUpload:
    name: getFailedInfoToUpload-${env:STAGE}
    handler: functions/getFailedInfoToUpload.handler
    runtime: python3.8
    timeout: 10
    environment:
      STAGE: ${env:STAGE}

  uploadBatchSeries:
    name: uploadBatchSeries-${env:STAGE}
    handler: functions/uploadBatchSeries.handler
    runtime: python3.8
    timeout: 10
    environment:
      STAGE: ${env:STAGE}

  brokenSeriesTrigger:
    name: brokenSeriesTrigger-${env:STAGE}
    handler: functions/brokenSeriesTrigger.handler
    runtime: python3.8
    timeout: 10
    events:
      - schedule:
          rate: rate(30 minutes)
          enabled: false
      - schedule:
          rate: cron(30 * * * ? *)
          enabled: false
    environment:
      STAGE: ${env:STAGE}

stepFunctions:
  stateMachines:
    getBrokenSeries:
      name: getBrokenSeries-${env:STAGE}
      definition:
        StartAt: GetAll
        States:
          GetAll:
            Type: Task
            Resource:
              Fn::GetAtt: [getAllFilesSeriesInfo, Arn]
            Next: CompareAndFix
          CompareAndFix:
            Type: Map
            ItemsPath: $.object_list
            ResultPath: $.valid_file_content
            MaxConcurrency: 10
            Iterator:
              StartAt: FixContent
              States:
                FixContent:
                  Type: Task
                  Resource:
                    Fn::GetAtt: [getFixedFileContent, Arn]
                  End: true
            Next: CatchBreathAfterMap
          CatchBreathAfterMap:
            Type: Wait
            Seconds: 5
            Next: GetMissingInfo
          GetMissingInfo:
            Type: Task
            Resource:
              Fn::GetAtt: [getFailedInfoToUpload, Arn]
            Next: NotifyErrors
          NotifyErrors:
            Type: Choice
            Choices:
              - Variable: $.to_insert_len
                NumericGreaterThanEquals: 0
                Next: UploadMissingSeries
            Default: FinalRest
          UploadMissingSeries:
            Type: Task
            Resource:
              Fn::GetAtt: [uploadBatchSeries, Arn]
            Next: FinalRest
          FinalRest:
            Type: Wait
            Seconds: 1
            End: true

plugins:
  - serverless-step-functions
